balance_sheet_facebook[0]
balance_sheet_facebook[0,1]
row.names(balance_sheet_facebook[2,1])
row.names.data.frame(balance_sheet_facebook)
balance_sheet_facebook[17]
balance_sheet_facebook[17,1]
balance_sheet_facebook[27,1] / balance_sheet_facebook[17,1]
balance_sheet_facebook[27,1]
getwd()
for(i in 1:3) {}
for(i in 1:3) {
}
pv <- 0
for (i in 1:3) {
pv <- pv + 50/(1.05)^i
}
print(pv)
source('~/Documents/FinanceInR/CAPM1.R')
listings
source('~/Documents/FinanceInR/CAPM1.R')
listings
head(listings)
source('~/Documents/FinanceInR/CAPM1.R')
listings <- listings[listings$IPOyear<2015, 1:6]
length(listings)
listings
listings[listings$IPOyear<2015, .]
listings[listings$IPOyear<2015,]
head(listings[listings$IPOyear<2015,])
head(listings[listings$IPOyear<"2015",])
head(listings[listings$Sector=="NASDAQ",])
head(listings[,])
head(listings)
source('~/Documents/FinanceInR/CAPM1.R')
head(listings)
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
listings
head(listings)
cf <- c(50,100,50,80)
cf
cf[1]
cf[2]
cf[3]
cf[4]
source('~/Documents/FinanceInR/CAPM1.R')
listings
head(listings)
source('~/Documents/FinanceInR/CAPM1.R')
View(listings)
listings$Sector=="Technology"
listings$Sector
listings$Sector[1]
listings$Sector[2]
listings$Sector
listings
source('~/Documents/FinanceInR/CAPM1.R')
original
listings
listings
listings <- original[original$Exchange=="NASDAQ",]
head(listings)
listings$Sector=="Technology"
source('~/Documents/FinanceInR/CAPM1.R')
listings <- original[original$Exchange=="NASDAQ" && original$Sector=="Technology",]
listings <- original[original$Exchange=="NASDAQ" & original$Sector=="Technology",]
listings
head(listings)
listings <- listings[listings$MarketCap!="<NA>",]
listings
listings <- original[original$Exchange=="NASDAQ" & original$Sector=="Technology",]
head(listings)
sort(listings)
sort(listings, marketcap)
sort(listings, order=marketcap)
sort(listings, order=MarketCap)
sort(listings, order="MarketCap")
listings[order="MarketCap"]
listings[order(MarketCap)]
listings[order(listings$MarketCap)]
listings[order(listings$MarketCap),]
head(listings[order(listings$MarketCap),])
head(listings[order(-listings$MarketCap),])
head(listings[order(-listings$"MarketCap"),])
head(listings[order(-3),])
head(listings[order(-4),])
listings[listings$MarketCap=="<NA>"]
listings[listings$"MarketCap"=="<NA>"]
listings <- original[original$Exchange=="NASDAQ" & original$Sector=="Technology",]
listings[listings$"MarketCap"=="<NA>"]
listings[4=="<NA>"]
listings[4=="<NA>",]
listings[with(listings(MarketCap=="<NA>"),]
listings[with(listings(MarketCap=="<NA>")),]
listings[with(listings, MarketCap=="<NA>"),]
listings[with(listings, MarketCap!="<NA>"),]
listings[with(listings, MarketCap!="<NA>"),]
head(listings[with(listings, MarketCap!="<NA>"),])
listings[ order(-listings[,4]),]
listings[ order(-listings[,4]),]
library(plyr)
arrange(listings, desc(listings$MarketCap))
nasdaq_top <- arrange(listings, desc(listings$MarketCap))
nasdaq_top
nasdaq_top[1:100]
nasdaq_top[1:100,]
listings <- original[original$Exchange=="NASDAQ",]
head(listings)
tail(listings)
listings$Sector=="Technology"
listings$Sector
listings$Sector!=NA
listings$Sector!="NA"
listings <- listings[!is.na(listings$MarketCap)]
listings <- listings[!is.na(listings$MarketCap),]
listings <- arrange(listings, desc(listings$MarketCap))
listings
head(listings)
source('~/Documents/FinanceInR/CAPM1.R')
listings <- original[original$Exchange=="NASDAQ",]
listings <- listings[!is.na(listings$MarketCap),]
print(length(listings))
listings <- arrange(listings, desc(listings$MarketCap))
listings <- listings[!is.na(listings$Sector),]
listings <- listings[listings$Sector=="Technology"]
listings <- listings[listings$Sector=="Technology",]
listings <- arrange(listings, desc(listings$MarketCap))
View(listings)
testx<-c(1.03, 1.05, 0.99, 0.98)
gm(testx)
exp(mean(log(testx)))
exp(mean(log(testx)))-1
testx - 1
testxx <- testx - 1
exp(mean(log(testxx)))-1
source('~/Documents/FinanceInR/CAPM1.R')
View(listings)
str <- "$234.55M"
gsub(str, "$", "")
str <- gsub(str, "$", "")
str
str <- "$234.55M"
gsub("$", "", str)
gsub("$$", "", str)
gsub("\\$", "", str)
right(str, -1, 02)
right(str, -1, -2)
str_sub("leftright",-5,-1)
library("stringr")
str_sub("leftright",-5,-1)
str_sub("leftright",-2,-1)
str_sub("leftright",-1,-1)
pure_number <- gsub("(B|M)", "", str)
pure_number
source('~/Documents/FinanceInR/CAPM1.R')
listings$MarketCap <- sapply(listings$MarketCap, convert_marketcap)
source('~/Documents/FinanceInR/CAPM1.R')
convert_marketcap <- function(str) {
str <- gsub("\\$", "", str) #Get rid of "$" first
multiplier <- str_sub("leftright",-1,-1)
pure_number <- as.numeric(gsub("(B|M)", "", str))
if(multiplier == "B") {
#Billion
adjustment <- 1000000000
} else {
#Million
adjustment <- 1000000
}
return (toString(pure_number * multiplier))
}
listings$MarketCap <- sapply(listings$MarketCap, convert_marketcap)
convert_marketcap <- function(str) {
str <- gsub("\\$", "", str) #Get rid of "$" first
multiplier <- str_sub("leftright",-1,-1)
pure_number <- as.numeric(gsub("(B|M)", "", str))
if(multiplier == "B") {
#Billion
adjustment <- 1000000000
} else {
#Million
adjustment <- 1000000
}
return (toString(pure_number * adjustment))
}
listings$MarketCap <- sapply(listings$MarketCap, convert_marketcap)
listings$MarketCap
convert_marketcap <- function(str) {
str <- gsub("\\$", "", str) #Get rid of "$" first
multiplier <- str_sub("leftright",-1,-1)
pure_number <- as.numeric(gsub("(B|M)", "", str))
if(multiplier == "B") {
#Billion
adjustment <- 1000000000
} else {
#Million
adjustment <- 1000000
}
return (pure_number * adjustment)
}
listings$MarketCap <- sapply(listings$MarketCap, convert_marketcap)
listings$MarketCap
listings <- arrange(listings, desc(listings$MarketCap))
head(listings)
listings
capm <- data.frame(ticker="", volatility=1:20, geometric_return=1:20)
capm
capm$ticker <- listings$Symbol[1:20]
capm
for(i in 1:20) {}
for(i in 1:20) {
information_on_stock <- getcapm(capm$ticker)
}
for(i in 1:20) {
information_on_stock <- getcapm(capm$ticker[i])
capm$geometric_return <- information_on_stock[1]
capm$volatility <- information_on_stock[2]
}
View(capm)
for(i in 1:20) {
information_on_stock <- getcapm(capm$ticker[i])
capm$geometric_return[i] <- information_on_stock[1]
capm$volatility[i] <- information_on_stock[2]
}
capm$geometric_return-1
original[original$Symbol=="AAPL",]
listings[listings$Symbol=="AAPL",]
listings
listings[,1:50]
listings[1:50,]
original[original$Symbol=="AAPL",]
original[original$Symbol=="SGOC",]
source('~/Documents/FinanceInR/CAPM1.R')
capm
source('~/Documents/FinanceInR/CAPM1.R')
capm
listings
source('~/Documents/FinanceInR/CAPM1.R')
capm
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
data <- get.hist.quote("AAPL", #Tick mark
start="2015-01-01", #Start date YYYY-MM-DD
end="2015-12-31" #End date YYYY-MM-DD
)
yesterdayprice <- data$Close
plot(yesterdayprice)
todayprice <- lag(yesterdayprice)
rets <- (todayprice - yesterdayprice)/todayprice
plot(rets)
length(rets)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
View(capm)
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
data <- get.hist.quote("AAPL", #Tick mark
start="2014-01-01", #Start date YYYY-MM-DD
end="2014-12-31" #End date YYYY-MM-DD
)
#We only take into account "Closing price", the price when the market closes
yesterdayprice <- data$Close
#This is a unique feature of R better than Excel
#I need to calculate everyday return
#The stock return is defined as (today price - yesterday price)/today price
todayprice <- lag(yesterdayprice)
#ret <- log(lag(price)) - log(price)
rets <- (todayprice - yesterdayprice)/todayprice
#Annualized and percentage
vol <- sd(rets) * sqrt(length(todayprice))
geometric_mean_return_prep <- rets + 1
#geometric_mean_return <- exp(mean(log(geometric_mean_return_prep)))
geometric_mean_return = 1
for(i in 1:length(geometric_mean_return_prep)) {
geometric_mean_return = geometric_mean_return * geometric_mean_return_prep[i]
}
geometric_mean_return <- geometric_mean_return^(1/length(geometric_mean_return_prep))
geometric_mean_return <- geometric_mean_return -1
geometirc
geometric_mean_return
geometric_mean_return_prep[1]
geometric_mean_return_prep[3]
geometric_mean_return_prep[5]
geometric_mean_return_prep$data[5]
geometric_mean_return_prep[5]
geometric_mean_return_prep <- zooToDf(geometric_mean_return_prep)
library(zoo)
geometric_mean_return_prep <- zooToDf(geometric_mean_return_prep)
geometric_mean_return_prep <-  data.frame(Date=time(geometric_mean_return_prep), geometric_mean_return_prep, check.names=FALSE, row.names=NULL)
geometric_mean_return_prep
for(i in 1:length(geometric_mean_return_prep)) {
geometric_mean_return = geometric_mean_return * geometric_mean_return_prep[2,i]
}
geometric_mean_return_prep <-  data.frame(Date=time(geometric_mean_return_prep), geometric_mean_return_prep, check.names=FALSE, row.names=NULL)
#geometric_mean_return <- exp(mean(log(geometric_mean_return_prep)))
geometric_mean_return = 1
for(i in 1:length(geometric_mean_return_prep)) {
geometric_mean_return = geometric_mean_return * geometric_mean_return_prep[2,i]
}
data <- get.hist.quote("AAPL", #Tick mark
start="2014-01-01", #Start date YYYY-MM-DD
end="2014-12-31" #End date YYYY-MM-DD
)
#We only take into account "Closing price", the price when the market closes
yesterdayprice <- data$Close
#This is a unique feature of R better than Excel
#I need to calculate everyday return
#The stock return is defined as (today price - yesterday price)/today price
todayprice <- lag(yesterdayprice)
#ret <- log(lag(price)) - log(price)
rets <- (todayprice - yesterdayprice)/todayprice
#Annualized and percentage
vol <- sd(rets) * sqrt(length(todayprice))
geometric_mean_return_prep <- rets + 1
geometric_mean_return_prep <-  data.frame(Date=time(geometric_mean_return_prep), geometric_mean_return_prep, check.names=FALSE, row.names=NULL)
#geometric_mean_return <- exp(mean(log(geometric_mean_return_prep)))
geometric_mean_return = 1
for(i in 1:length(geometric_mean_return_prep)) {
geometric_mean_return = geometric_mean_return * geometric_mean_return_prep[2,i]
}
geometric_mean_return <- geometric_mean_return^(1/length(geometric_mean_return_prep))
geometric_mean_return_prep[2,1]
geometric_mean_return_prep[1,1]
geometric_mean_return_prep[3,1]
geometric_mean_return_prep[3,2]
for(i in 1:length(geometric_mean_return_prep)) {
geometric_mean_return = geometric_mean_return * geometric_mean_return_prep[i,2]
}
geometric_mean_return <- geometric_mean_return^(1/length(geometric_mean_return_prep))
geometric_mean_return <- geometric_mean_return -1
geometric_mean_return
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
reg <- with(capm, lm(volatility ~ geometric_return))
reg
summary(reg)
plot(capm$volatility, capm$geometric_return)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
plot(capm$volatility, capm$geometric_return)
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
listings$Sector
original$Sector
source('~/Documents/FinanceInR/CAPM1.R')
View(capm)
plot(x=capm$volatility,y=capm$geometric_return,pch=17)
plot(x=capm$volatility,y=capm$geometric_return,pch=19)
source('~/Documents/FinanceInR/CAPM1.R')
plot(x=capm$volatility,y=capm$geometric_return,pch=19, main = main_name, xlab="Stock Volatility", ylab="Stock Return")
source('~/Documents/FinanceInR/CAPM1.R')
library(calibrate)
install.packages("calibrate")
library(calibrate)
textxy(CAPM$volatility, CAPM$geometric_return, capm$ticker)
textxy(capm$volatility, capm$geometric_return, capm$ticker)
sector <- "Technology"
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
capm<-capm[-11]
capm
capm<-capm[-11,]
capm
plot(x=capm$volatility,y=capm$geometric_return,pch=19, main = main_name, xlab="Stock Volatility", ylab="Stock Return")
#I want to know which stock is outlier.
textxy(capm$volatility, capm$geometric_return, capm$ticker)
textxy(capm$volatility, capm$geometric_return, capm$ticker)
library(calibrate) #To represent stock name on scatter plot
textxy(capm$volatility, capm$geometric_return, capm$ticker)
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
source('~/Documents/FinanceInR/CAPM1.R')
information_table <- data.frame(
month=c("1m", "3m", "6m"),
libor_rate=c(0.01, 0.02, 0.03,),
tbill_rate=c(0.015, 0.022, 0.033)
)
information_table <- data.frame(
month=c("1m", "3m", "6m"),
libor_rate=c(0.01, 0.02, 0.03),
tbill_rate=c(0.015, 0.022, 0.033)
)
information_table[2]
information_table[,2]
list1 <- as.list(x="string", b=123, c=c(1,2,3))
list1
list1[[1]]
list1[[2]]
list1[2
]
list1
list1[1]
libor<-c(0.01, 0.02, 0.03)
tbill<-c(0.01, 0.02, 0.05, 0.12)
swap<-c("1m", "2m", "3m", "6m", "12m")
counterpartyrisk<-(TRUE, FALSE, TRUE)
counterpartyrisk<-c(TRUE, FALSE, TRUE)
list <- c(libor, tbill, swap, counterpartyrisk)
list
list[1]
list[2]
list <- list(libor,tbill,swap,counterpartyrisk)
list
libor<-c(0.01, 0.02, 0.03)
tbill<-c(0.01, 0.02, 0.05, 0.12)
swap<-c("1m", "2m", "3m", "6m", "12m")
counterpartyrisk<-c(TRUE, FALSE, TRUE)
list <- c(libor, tbill, swap, counterpartyrisk)
list
libor<-c(0.01, 0.02, 0.03)
tbill<-c(0.01, 0.02, 0.05, 0.12)
swap<-c("1m", "2m", "3m", "6m", "12m")
counterpartyrisk<-c(TRUE, FALSE, TRUE)
list_all <- list(libor, tbill, swap, counterpartyrisk)
list_all
list[[1]]
list_all[1]
list_all[2]
list_all[3]
list_all[4]
list_all[5]
list_all[1][1]
list_all[[1]
]
list[1]
list_all[1]
list_all[[1]]
list_all[1][1]
list_all[[1]][1]
source('~/Documents/FinanceInR/dataframe_example.R')
information_table
gender <- factor(gender)
gender
information_table$people_gender <- factor(information_table$people_gender, gender)
information_table
information_table <- data.frame(
people_name=c("Tom", "Jane", "Greg", "Kelly"),
people_gender=c(1, 2, 1, 2)
)
information_table <- data.frame(
people_name=c("Tom", "Jane", "Greg", "Kelly"),
people_gender=c(1, 2, 1, 2)
)
information_table$people_gender <- factor(information_table$people_gender, labels=c("Male", "Female"))
information_table
information_table$people_gender
getsquare<-function(x) {
y <- x^2
return(y)
}
getsquare(2)
getsquare(4)
information_table <- data.frame(
libor_rate=c(0.01, 0.02, 0.03),
tbill_rate=c(0.015, 0.022, 0.033)
)
changevalues <- function(x) {
y <- x*2
return (y)
}
sapply(information_table, changevalues)
information_table <- data.frame(
libor_rate=c(0.01, 0.02, 0.03),
tbill_rate=c(0.015, 0.022, 0.033)
)
changevalues <- function(x) {
y <- x*2
return (y)
}
information_table<-sapply(information_table, changevalues)
information_table
pwd()
getpwd()
getwd()
setwd("/Users/seokbongchoi/Documents/FinanceInR")
mydata<-read.csv("test.csv")
mydata
information_table <- data.frame(
month=c("1m", "3m", "6m"),
libor_rate=c(0.01, 0.02, 0.03),
tbill_rate=c(0.015, 0.022, 0.033)
)
write.csv(information_table)
write.csv(information_table.csv)
write.csv(information_table, filename="information_table.csv")
write.csv(information_table, file="information_table.csv")
sentence <- paste("I am", " a boy.")
sentence <- paste(sentence, "You are a girl")
sentence
install.packages("gdata")
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE) #There are great sample data offered by UCI. Let's use this!
head(iris)
my.data <- read.xls("test_excel.xlsx")
my.data <- read.xlsx("test_excel.xlsx")
library(gdata)
my.data <- read.xlsx("test_excel.xlsx")
my.data <- read.xls("test_excel.xlsx")
my.data
sentence <- "I am a boy. You are a girl"
gsub(pattern="a boy", replacement="boys", sentence)
sentence_fixed <- gsub(pattern="a boy", replacement="boys", sentence)
sentence_fixed
sentence_fixed <- gsub(patterm="((a boy)|(a girl))", replacement="a student", sentence)
sentence_fixed <- gsub(pattern="((a boy)|(a girl))", replacement="a student", sentence)
sentence_fixed
